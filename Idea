
Have a table driven parser, entries are things like
  Define('name', items) -- define a name 
  Or(a,b,c)     -- or of next 3 items
  Symbol('(')   -- match a regexp 
  Lookup('slot')) -- Recurse at slot
  Seq(a,b,c)    -- sequence of items
  Opt(a,b,c)    -- Or( Seq(Symbol(a), b, c), Empty())
  Empty()       -- null sequence

so:

Define('func',  
   Seq(Symbol('function'), Symbol('\w+'),  Lookup('formal_arg_list'), Lookup('spec_type'), Opt('pre:', predicate), Opt('post:', predicate) , Lookup('block')))

Define('block', 
    Seq(Symbol('begin'), stmt_seq, Symbol('end')))

Define('spec_type', 
    Seq(Symbol(':') , Lookup('type')))

Define('formal_arg_list', 
    Opt('(', Lookup('formal_list'), Symbol(')')))

Define('formal_list', 
    Seq(Lookup('formal')), Opt(',', Lookup('formal_list')))

Define('formal',  
    Seq(Symbol('\w+'), Lookup('spec_type')))

Define('type',   
   Or(
    Seq(Symbol('array'), Symbol('['), Lookup('expression'), Symbol(']'), Lookup('type')),
    Seq(Symbol('class'), Symbol('['), Lookup('expression'), Symbol(']'), Lookup('type'))
    Symbol('\w+')))

Define('statement',  
    Or(
       Seq( Symbol('if'), Lookup('guardlist'), Symbol('fi'), Lookup('opt_assertion')),
       Seq( Symbol('it'), Lookup('opt')_invariant) , Lookup('opt_bound'), Lookup('guardlist'), Symbol('fi') , Lookup('opt_assertion'),
       Lookup('assignment')
    ))

Define('stmt_seq', Seq( Lookup('stmt')), Recurse(optAssertion), Opt(';', Lookup('stmt')))

Define('opt_Assertion',  Opt('{', Lookup('predicate'), Symbol('}')))

Define('guardlist',  Seq( Recuse(guard), Opt(';;', Lookup('guardlist'))))

Define('guard',  Seq( Lookup('predicate'), Symbol('->'), Lookup('stmt_seq')))

Define('assignemnt',  Seq( Lookup('varlist'), Symbol('='), Lookup('exprlist')))

Define('opt_invariant', Opt('Inv:', Lookup('predicate')) )
Define('opt_bound', Opt('Bound:', Lookup('expression')) )


Define('predicate',  
     Seq(Lookup('and_pred'), Or(
         Seq( Symbol('==='), Lookup('predicate')),
         Seq( Symbol('!=='), Lookup('predicate')),
         Seq( Symbol('==>'), Lookup('predicate')),
         Seq( Symbol('<=='), Lookup('predicate')),
         Empty())))

Define('and_pred',  Seq(Lookup('or')_pred), Opt('&&', Lookup('and_pred')))
Define('or_pred',  Seq(Lookup('comp')_pred), Opt('||', Lookup('or_pred')))

Define('comp_pred', Seq(Lookup('expression')), Or(
                       Seq( Symbol('=='), Lookup('comp_pred')),
                       Seq( Symbol('!='), Lookup('comp_pred')),
                       Seq( Symbol('>='), Lookup('comp_pred')),
                       Seq( Symbol('<='), Lookup('comp_pred')),
                       Empty()))

Define('expression', Seq(Lookup('term')), Or(
                       Seq( Symbol('+'), Lookup('expression'))),
                       Seq( Symbol('-'), Lookup('expression'))),
                       Seq( Symbol('|'), Lookup('expression'))),
                       Empty()))

Define('primary', Or( Seq( Symbol('-'), Lookup('primary'))),
              Seq( Symbol('!'), Lookup('primary'))),
              Symbol('\d+'),
              Symbol('0x\x+'),
              Seq( Symbol('\w+'), Or(
                    Seq( Symbol('['), Lookup('expression')), Symbol(']'))
                    Seq( Symbol('('), Lookup('expression')_list), Symbol(')'))
                    Seq( Symbol('.'), Lookup('primary')))
                    Empty())))
              
